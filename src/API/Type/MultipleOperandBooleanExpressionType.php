<?php

namespace garethp\ews\API\Type;

/**
 * Class representing MultipleOperandBooleanExpressionType
 *
 *
 * XSD Type: MultipleOperandBooleanExpressionType
 */
class MultipleOperandBooleanExpressionType extends SearchExpressionType
{

    /**
     * @var \garethp\ews\API\Type\Contains[]
     */
    protected $contains = null;

    /**
     * @var \garethp\ews\API\Type\Excludes[]
     */
    protected $excludes = null;

    /**
     * @var \garethp\ews\API\Type\Exists[]
     */
    protected $exists = null;

    /**
     * @var \garethp\ews\API\Type\IsEqualTo[]
     */
    protected $isEqualTo = null;

    /**
     * @var \garethp\ews\API\Type\IsNotEqualTo[]
     */
    protected $isNotEqualTo = null;

    /**
     * @var \garethp\ews\API\Type\IsGreaterThan[]
     */
    protected $isGreaterThan = null;

    /**
     * @var \garethp\ews\API\Type\IsGreaterThanOrEqualTo[]
     */
    protected $isGreaterThanOrEqualTo = null;

    /**
     * @var \garethp\ews\API\Type\IsLessThan[]
     */
    protected $isLessThan = null;

    /**
     * @var \garethp\ews\API\Type\IsLessThanOrEqualTo[]
     */
    protected $isLessThanOrEqualTo = null;

    /**
     * @var \garethp\ews\API\Type\AndElement[]
     */
    protected $and = null;

    /**
     * @var \garethp\ews\API\Type\Not[]
     */
    protected $not = null;

    /**
     * @var \garethp\ews\API\Type\OrElement[]
     */
    protected $or = null;

    /**
     * @autogenerated This method is safe to replace
     * @param $value Contains
     * @return MultipleOperandBooleanExpressionType
     */
    public function addContains(Contains $value)
    {
        if ($this->contains === null) {
                        $this->contains = array();
        }

        if (!is_array($this->contains)) {
            $this->contains = array($this->contains);
        }

        $this->contains[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return Contains[]
     */
    public function getContains()
    {
        return $this->contains;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value Contains[]|Contains
     * @return MultipleOperandBooleanExpressionType
     */
    public function setContains(array|Contains $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->contains = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value Excludes
     * @return MultipleOperandBooleanExpressionType
     */
    public function addExcludes(Excludes $value)
    {
        if ($this->excludes === null) {
                        $this->excludes = array();
        }

        if (!is_array($this->excludes)) {
            $this->excludes = array($this->excludes);
        }

        $this->excludes[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return Excludes[]
     */
    public function getExcludes()
    {
        return $this->excludes;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value Excludes[]|Excludes
     * @return MultipleOperandBooleanExpressionType
     */
    public function setExcludes(array|Excludes $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->excludes = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value Exists
     * @return MultipleOperandBooleanExpressionType
     */
    public function addExists(Exists $value)
    {
        if ($this->exists === null) {
                        $this->exists = array();
        }

        if (!is_array($this->exists)) {
            $this->exists = array($this->exists);
        }

        $this->exists[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return Exists[]
     */
    public function getExists()
    {
        return $this->exists;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value Exists[]|Exists
     * @return MultipleOperandBooleanExpressionType
     */
    public function setExists(array|Exists $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->exists = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsEqualTo
     * @return MultipleOperandBooleanExpressionType
     */
    public function addIsEqualTo(IsEqualTo $value)
    {
        if ($this->isEqualTo === null) {
                        $this->isEqualTo = array();
        }

        if (!is_array($this->isEqualTo)) {
            $this->isEqualTo = array($this->isEqualTo);
        }

        $this->isEqualTo[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return IsEqualTo[]
     */
    public function getIsEqualTo()
    {
        return $this->isEqualTo;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsEqualTo[]|IsEqualTo
     * @return MultipleOperandBooleanExpressionType
     */
    public function setIsEqualTo(array|IsEqualTo $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->isEqualTo = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsNotEqualTo
     * @return MultipleOperandBooleanExpressionType
     */
    public function addIsNotEqualTo(IsNotEqualTo $value)
    {
        if ($this->isNotEqualTo === null) {
                        $this->isNotEqualTo = array();
        }

        if (!is_array($this->isNotEqualTo)) {
            $this->isNotEqualTo = array($this->isNotEqualTo);
        }

        $this->isNotEqualTo[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return IsNotEqualTo[]
     */
    public function getIsNotEqualTo()
    {
        return $this->isNotEqualTo;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsNotEqualTo[]|IsNotEqualTo
     * @return MultipleOperandBooleanExpressionType
     */
    public function setIsNotEqualTo(array|IsNotEqualTo $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->isNotEqualTo = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsGreaterThan
     * @return MultipleOperandBooleanExpressionType
     */
    public function addIsGreaterThan(IsGreaterThan $value)
    {
        if ($this->isGreaterThan === null) {
                        $this->isGreaterThan = array();
        }

        if (!is_array($this->isGreaterThan)) {
            $this->isGreaterThan = array($this->isGreaterThan);
        }

        $this->isGreaterThan[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return IsGreaterThan[]
     */
    public function getIsGreaterThan()
    {
        return $this->isGreaterThan;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsGreaterThan[]|IsGreaterThan
     * @return MultipleOperandBooleanExpressionType
     */
    public function setIsGreaterThan(array|IsGreaterThan $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->isGreaterThan = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsGreaterThanOrEqualTo
     * @return MultipleOperandBooleanExpressionType
     */
    public function addIsGreaterThanOrEqualTo(IsGreaterThanOrEqualTo $value)
    {
        if ($this->isGreaterThanOrEqualTo === null) {
                        $this->isGreaterThanOrEqualTo = array();
        }

        if (!is_array($this->isGreaterThanOrEqualTo)) {
            $this->isGreaterThanOrEqualTo = array($this->isGreaterThanOrEqualTo);
        }

        $this->isGreaterThanOrEqualTo[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return IsGreaterThanOrEqualTo[]
     */
    public function getIsGreaterThanOrEqualTo()
    {
        return $this->isGreaterThanOrEqualTo;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsGreaterThanOrEqualTo[]|IsGreaterThanOrEqualTo
     * @return MultipleOperandBooleanExpressionType
     */
    public function setIsGreaterThanOrEqualTo(array|IsGreaterThanOrEqualTo $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->isGreaterThanOrEqualTo = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsLessThan
     * @return MultipleOperandBooleanExpressionType
     */
    public function addIsLessThan(IsLessThan $value)
    {
        if ($this->isLessThan === null) {
                        $this->isLessThan = array();
        }

        if (!is_array($this->isLessThan)) {
            $this->isLessThan = array($this->isLessThan);
        }

        $this->isLessThan[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return IsLessThan[]
     */
    public function getIsLessThan()
    {
        return $this->isLessThan;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsLessThan[]|IsLessThan
     * @return MultipleOperandBooleanExpressionType
     */
    public function setIsLessThan(array|IsLessThan $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->isLessThan = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsLessThanOrEqualTo
     * @return MultipleOperandBooleanExpressionType
     */
    public function addIsLessThanOrEqualTo(IsLessThanOrEqualTo $value)
    {
        if ($this->isLessThanOrEqualTo === null) {
                        $this->isLessThanOrEqualTo = array();
        }

        if (!is_array($this->isLessThanOrEqualTo)) {
            $this->isLessThanOrEqualTo = array($this->isLessThanOrEqualTo);
        }

        $this->isLessThanOrEqualTo[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return IsLessThanOrEqualTo[]
     */
    public function getIsLessThanOrEqualTo()
    {
        return $this->isLessThanOrEqualTo;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value IsLessThanOrEqualTo[]|IsLessThanOrEqualTo
     * @return MultipleOperandBooleanExpressionType
     */
    public function setIsLessThanOrEqualTo(array|IsLessThanOrEqualTo $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->isLessThanOrEqualTo = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value AndElement
     * @return MultipleOperandBooleanExpressionType
     */
    public function addAnd(AndElement $value)
    {
        if ($this->and === null) {
                        $this->and = array();
        }

        if (!is_array($this->and)) {
            $this->and = array($this->and);
        }

        $this->and[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return AndElement[]
     */
    public function getAnd()
    {
        return $this->and;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value AndElement[]|AndElement
     * @return MultipleOperandBooleanExpressionType
     */
    public function setAnd(array|AndElement $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->and = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value Not
     * @return MultipleOperandBooleanExpressionType
     */
    public function addNot(Not $value)
    {
        if ($this->not === null) {
                        $this->not = array();
        }

        if (!is_array($this->not)) {
            $this->not = array($this->not);
        }

        $this->not[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return Not[]
     */
    public function getNot()
    {
        return $this->not;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value Not[]|Not
     * @return MultipleOperandBooleanExpressionType
     */
    public function setNot(array|Not $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->not = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value OrElement
     * @return MultipleOperandBooleanExpressionType
     */
    public function addOr(OrElement $value)
    {
        if ($this->or === null) {
                        $this->or = array();
        }

        if (!is_array($this->or)) {
            $this->or = array($this->or);
        }

        $this->or[] = $value;
        return $this;
    }

    /**
     * @autogenerated This method is safe to replace
     * @return OrElement[]
     */
    public function getOr()
    {
        return $this->or;
    }

    /**
     * @autogenerated This method is safe to replace
     * @param $value OrElement[]|OrElement
     * @return MultipleOperandBooleanExpressionType
     */
    public function setOr(array|OrElement $value)
    {
        if (!is_array($value)) {
            $value = [$value];
        }
        $this->or = $value;
        return $this;
    }
}
